name: Planetoid

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_client_linux_and_wasm:
    name: Build clients Linux and Wasm
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install package dependencies
      run: sudo apt-get update && sudo apt-get install -y pkg-config libx11-dev libxi-dev libgl1-mesa-dev libasound2-dev

    - name: Build for target x86_64-unknown-linux-gnu
      working-directory: ./client
      run: cargo build

    - name: Run clippy for target x86_64-unknown-linux-gnu
      working-directory: ./client
      run: cargo clippy >clippy.output 2>&1 ; cat clippy.output ;! egrep -q "warning|error:" clippy.output

    - name: Run tests
      working-directory: ./client
      run: cargo test

    - name: Add wasm32-unknown-unknown target
      run: rustup target add wasm32-unknown-unknown

    - name: Build for target wasm32-unknown-unknown
      working-directory: ./client
      run: cargo build --target wasm32-unknown-unknown

    - name: Run clippy for target wasm32-unknown-unknown
      working-directory: ./client
      run: cargo clippy --target wasm32-unknown-unknown >clippy.output 2>&1 ; cat clippy.output ;! egrep -q "warning|error:" clippy.output

    - name: Prepare produced files
      run: |
        mkdir -p planetoid-linux-x86_64 planetoid-wasm
        cp client/target/debug/planetoid planetoid-linux-x86_64
        cp -r client/sounds planetoid-linux-x86_64
        cp client/index.html planetoid-wasm
        cp client/target/wasm32-unknown-unknown/debug/planetoid.wasm planetoid-wasm
        cp -r client/sounds planetoid-wasm
        tar zcvvf planetoid-linux-x86_64.tar.gz planetoid-linux-x86_64
        tar zcvvf planetoid-wasm.tar.gz planetoid-wasm

    - name: 'Upload planetoid-linux-x86_64.tar.gz'
      uses: actions/upload-artifact@v2
      with:
        name: planetoid-linux-x86_64.tar.gz
        path: planetoid-linux-x86_64.tar.gz
        retention-days: 1

    - name: 'Upload planetoid-wasm.tar.gz'
      uses: actions/upload-artifact@v2
      with:
        name: planetoid-wasm.tar.gz
        path: planetoid-wasm.tar.gz
        retention-days: 1

  build_client_macos:
    name: Build clients MacOS
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build for target x86_64-apple-darwin
      working-directory: ./client
      run: cargo build

    - name: Run tests
      working-directory: ./client
      run: cargo test

    - name: Prepare produced files
      run: |
        mkdir -p planetoid-macos-x86_64
        cp client/target/debug/planetoid planetoid-macos-x86_64
        cp -r client/sounds planetoid-macos-x86_64
        tar zcvvf planetoid-macos-x86_64.tar.gz planetoid-macos-x86_64

    - name: 'Upload planetoid-macos-x86_64.tar.gz'
      uses: actions/upload-artifact@v2
      with:
        name: planetoid-macos-x86_64.tar.gz
        path: planetoid-macos-x86_64.tar.gz
        retention-days: 1

  build_client_windows:
    name: Build client windows
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build for target x86_64-pc-windows-msvc
      working-directory: ./client
      run: cargo build

    - name: Run tests
      working-directory: ./client
      run: cargo test

    - name: Prepare produced files
      run: |
        new-item -Name planetoid-windows -ItemType directory
        Copy-Item -Path "client\target\debug\planetoid.exe" -Destination "planetoid-windows"
        Copy-Item -Path "client\sounds" -Destination "planetoid-windows" -Recurse
        Compress-Archive -Path planetoid-windows -DestinationPath planetoid-windows.zip

    - name: 'Upload planetoid-windows.zip'
      uses: actions/upload-artifact@v2
      with:
        name: planetoid-windows.zip
        path: planetoid-windows.zip
        retention-days: 1

  build_maven:
    name: Build server and worker
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Build server with Maven
      working-directory: ./server
      run: mvn package -Dquarkus.package.type=uber-jar

    - name: Build worker with Maven
      working-directory: ./worker
      run: mvn package -Dquarkus.package.type=uber-jar

    - name: Prepare produced files
      run: |
        mkdir -p planetoid-server planetoid-worker
        cp server/target/planetoid-server-1.0.0-SNAPSHOT-runner.jar planetoid-server
        cp worker/target/planetoid-worker-1.0.0-SNAPSHOT-runner.jar planetoid-worker
        tar zcvvf planetoid-server.tar.gz planetoid-server
        tar zcvvf planetoid-worker.tar.gz planetoid-worker

    - name: 'Upload planetoid-server.tar.gz'
      uses: actions/upload-artifact@v2
      with:
        name: planetoid-server.tar.gz
        path: planetoid-server.tar.gz
        retention-days: 1

    - name: 'Upload planetoid-worker.tar.gz'
      uses: actions/upload-artifact@v2
      with:
        name: planetoid-worker.tar.gz
        path: planetoid-worker.tar.gz
        retention-days: 1

  create_github_release:
    name: Create Github release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build_client_linux_and_wasm, build_client_windows, build_client_macos, build_maven]

    steps:
    - uses: actions/checkout@v2

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2

    - uses: "marvinpinto/action-automatic-releases@latest"
      name: Create a Github release
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: latest
        title: Planetoid
        files: |
          planetoid-server.tar.gz
          planetoid-worker.tar.gz
          planetoid-windows.zip
          planetoid-linux-x86_64.tar.gz
          planetoid-macos-x86_64.tar.gz
          planetoid-wasm.tar.gz
